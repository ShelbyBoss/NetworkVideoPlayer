//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.28307.137
// 
namespace NetworkVideoPlayerFrontend.VideoServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSystemItem", Namespace="http://schemas.datacontract.org/2004/07/NetworkFilePlayerBackend")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NetworkVideoPlayerFrontend.VideoServiceReference.DirectoryProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NetworkVideoPlayerFrontend.VideoServiceReference.FileProperties))]
    public partial class FileSystemItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AttributesField;
        
        private System.DateTime CreateTimeField;
        
        private bool ExistsField;
        
        private string FullPathField;
        
        private System.DateTime LastWriteTimeField;
        
        private string NameField;
        
        private string ParentField;
        
        private string ParentFullPathField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Exists {
            get {
                return this.ExistsField;
            }
            set {
                if ((this.ExistsField.Equals(value) != true)) {
                    this.ExistsField = value;
                    this.RaisePropertyChanged("Exists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastWriteTime {
            get {
                return this.LastWriteTimeField;
            }
            set {
                if ((this.LastWriteTimeField.Equals(value) != true)) {
                    this.LastWriteTimeField = value;
                    this.RaisePropertyChanged("LastWriteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentField, value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentFullPath {
            get {
                return this.ParentFullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFullPathField, value) != true)) {
                    this.ParentFullPathField = value;
                    this.RaisePropertyChanged("ParentFullPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryProperties", Namespace="http://schemas.datacontract.org/2004/07/NetworkFilePlayerBackend")]
    public partial class DirectoryProperties : NetworkVideoPlayerFrontend.VideoServiceReference.FileSystemItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileProperties", Namespace="http://schemas.datacontract.org/2004/07/NetworkFilePlayerBackend")]
    public partial class FileProperties : NetworkVideoPlayerFrontend.VideoServiceReference.FileSystemItem {
        
        private string ExtensionField;
        
        private long LengthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileStates", Namespace="http://schemas.datacontract.org/2004/07/NetworkFilePlayerBackend")]
    public partial struct FileStates : System.ComponentModel.INotifyPropertyChanged {
        
        private string IDField;
        
        private bool IsFileProvidedField;
        
        private bool IsProvidingFileField;
        
        private string PathField;
        
        private int UserCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFileProvided {
            get {
                return this.IsFileProvidedField;
            }
            set {
                if ((this.IsFileProvidedField.Equals(value) != true)) {
                    this.IsFileProvidedField = value;
                    this.RaisePropertyChanged("IsFileProvided");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProvidingFile {
            get {
                return this.IsProvidingFileField;
            }
            set {
                if ((this.IsProvidingFileField.Equals(value) != true)) {
                    this.IsProvidingFileField = value;
                    this.RaisePropertyChanged("IsProvidingFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserCount {
            get {
                return this.UserCountField;
            }
            set {
                if ((this.UserCountField.Equals(value) != true)) {
                    this.UserCountField = value;
                    this.RaisePropertyChanged("UserCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VideoServiceReference.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetFiles", ReplyAction="http://tempuri.org/IFileService/GetFilesResponse")]
        System.Threading.Tasks.Task<string[]> GetFilesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetFilesPage", ReplyAction="http://tempuri.org/IFileService/GetFilesPageResponse")]
        System.Threading.Tasks.Task<string[]> GetFilesPageAsync(string path, int pageSize, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetFileProperties", ReplyAction="http://tempuri.org/IFileService/GetFilePropertiesResponse")]
        System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileProperties> GetFilePropertiesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetDirectories", ReplyAction="http://tempuri.org/IFileService/GetDirectoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetDirectoriesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetDirectoriesPage", ReplyAction="http://tempuri.org/IFileService/GetDirectoriesPageResponse")]
        System.Threading.Tasks.Task<string[]> GetDirectoriesPageAsync(string path, int pageSize, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetDirectoryProperties", ReplyAction="http://tempuri.org/IFileService/GetDirectoryPropertiesResponse")]
        System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.DirectoryProperties> GetDirectoryPropertiesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetFileStates", ReplyAction="http://tempuri.org/IFileService/GetFileStatesResponse")]
        System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileStates> GetFileStatesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/StartProvideFile", ReplyAction="http://tempuri.org/IFileService/StartProvideFileResponse")]
        System.Threading.Tasks.Task<string> StartProvideFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ProvideFile", ReplyAction="http://tempuri.org/IFileService/ProvideFileResponse")]
        System.Threading.Tasks.Task<string> ProvideFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/StartUnprovideFile", ReplyAction="http://tempuri.org/IFileService/StartUnprovideFileResponse")]
        System.Threading.Tasks.Task StartUnprovideFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/UnprovideFile", ReplyAction="http://tempuri.org/IFileService/UnprovideFileResponse")]
        System.Threading.Tasks.Task UnprovideFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/UnprovideFileForAll", ReplyAction="http://tempuri.org/IFileService/UnprovideFileForAllResponse")]
        System.Threading.Tasks.Task UnprovideFileForAllAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/StartUnprovideFileForAll", ReplyAction="http://tempuri.org/IFileService/StartUnprovideFileForAllResponse")]
        System.Threading.Tasks.Task StartUnprovideFileForAllAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetProvidedFiles", ReplyAction="http://tempuri.org/IFileService/GetProvidedFilesResponse")]
        System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileStates[]> GetProvidedFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetProvidedFilesPage", ReplyAction="http://tempuri.org/IFileService/GetProvidedFilesPageResponse")]
        System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileStates[]> GetProvidedFilesPageAsync(int pageSize, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetBasePath", ReplyAction="http://tempuri.org/IFileService/GetBasePathResponse")]
        System.Threading.Tasks.Task<string> GetBasePathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetTime", ReplyAction="http://tempuri.org/IFileService/GetTimeResponse")]
        System.Threading.Tasks.Task<string> GetTimeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : NetworkVideoPlayerFrontend.VideoServiceReference.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<NetworkVideoPlayerFrontend.VideoServiceReference.IFileService>, NetworkVideoPlayerFrontend.VideoServiceReference.IFileService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FileServiceClient() : 
                base(FileServiceClient.GetDefaultBinding(), FileServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFileService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FileServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(FileServiceClient.GetBindingForEndpoint(endpointConfiguration), FileServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FileServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FileServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FileServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FileServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilesAsync(string path) {
            return base.Channel.GetFilesAsync(path);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilesPageAsync(string path, int pageSize, int pageIndex) {
            return base.Channel.GetFilesPageAsync(path, pageSize, pageIndex);
        }
        
        public System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileProperties> GetFilePropertiesAsync(string path) {
            return base.Channel.GetFilePropertiesAsync(path);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDirectoriesAsync(string path) {
            return base.Channel.GetDirectoriesAsync(path);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDirectoriesPageAsync(string path, int pageSize, int pageIndex) {
            return base.Channel.GetDirectoriesPageAsync(path, pageSize, pageIndex);
        }
        
        public System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.DirectoryProperties> GetDirectoryPropertiesAsync(string path) {
            return base.Channel.GetDirectoryPropertiesAsync(path);
        }
        
        public System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileStates> GetFileStatesAsync(string path) {
            return base.Channel.GetFileStatesAsync(path);
        }
        
        public System.Threading.Tasks.Task<string> StartProvideFileAsync(string path) {
            return base.Channel.StartProvideFileAsync(path);
        }
        
        public System.Threading.Tasks.Task<string> ProvideFileAsync(string path) {
            return base.Channel.ProvideFileAsync(path);
        }
        
        public System.Threading.Tasks.Task StartUnprovideFileAsync(string path) {
            return base.Channel.StartUnprovideFileAsync(path);
        }
        
        public System.Threading.Tasks.Task UnprovideFileAsync(string path) {
            return base.Channel.UnprovideFileAsync(path);
        }
        
        public System.Threading.Tasks.Task UnprovideFileForAllAsync(string path) {
            return base.Channel.UnprovideFileForAllAsync(path);
        }
        
        public System.Threading.Tasks.Task StartUnprovideFileForAllAsync(string path) {
            return base.Channel.StartUnprovideFileForAllAsync(path);
        }
        
        public System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileStates[]> GetProvidedFilesAsync() {
            return base.Channel.GetProvidedFilesAsync();
        }
        
        public System.Threading.Tasks.Task<NetworkVideoPlayerFrontend.VideoServiceReference.FileStates[]> GetProvidedFilesPageAsync(int pageSize, int pageIndex) {
            return base.Channel.GetProvidedFilesPageAsync(pageSize, pageIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetBasePathAsync() {
            return base.Channel.GetBasePathAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetTimeAsync() {
            return base.Channel.GetTimeAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFileService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFileService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:6428/FileService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return FileServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFileService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return FileServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFileService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IFileService,
        }
    }
}
