//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.28010.2041
// 
namespace NetworkVideoPlayer.VideoServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VideoServiceReference.IVideoService")]
    public interface IVideoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVideoService/GetFiles", ReplyAction="http://tempuri.org/IVideoService/GetFilesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetFilesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVideoService/GetDirectories", ReplyAction="http://tempuri.org/IVideoService/GetDirectoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetDirectoriesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVideoService/ProvideFile", ReplyAction="http://tempuri.org/IVideoService/ProvideFileResponse")]
        System.Threading.Tasks.Task<string> ProvideFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVideoService/UnprovideFile", ReplyAction="http://tempuri.org/IVideoService/UnprovideFileResponse")]
        System.Threading.Tasks.Task UnprovideFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVideoService/GetTime", ReplyAction="http://tempuri.org/IVideoService/GetTimeResponse")]
        System.Threading.Tasks.Task<string> GetTimeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVideoServiceChannel : NetworkVideoPlayer.VideoServiceReference.IVideoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VideoServiceClient : System.ServiceModel.ClientBase<NetworkVideoPlayer.VideoServiceReference.IVideoService>, NetworkVideoPlayer.VideoServiceReference.IVideoService {
        
        public VideoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetFilesAsync(string path) {
            return base.Channel.GetFilesAsync(path);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetDirectoriesAsync(string path) {
            return base.Channel.GetDirectoriesAsync(path);
        }
        
        public System.Threading.Tasks.Task<string> ProvideFileAsync(string path) {
            return base.Channel.ProvideFileAsync(path);
        }
        
        public System.Threading.Tasks.Task UnprovideFileAsync(string path) {
            return base.Channel.UnprovideFileAsync(path);
        }
        
        public System.Threading.Tasks.Task<string> GetTimeAsync() {
            return base.Channel.GetTimeAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
    }
}
